

// MUDAQ registers
// register banks
#define MUDAQ_REGS_RW_INDEX 0
#define MUDAQ_REGS_RW_LEN 256
#define MUDAQ_REGS_RO_INDEX 1
#define MUDAQ_REGS_RO_LEN 256
// device memory
#define MUDAQ_MEM_RW_INDEX 2
#define MUDAQ_MEM_RW_ORDER 16 // to be changed if writeable memory size differs!
#define MUDAQ_MEM_RW_LEN (1 << MUDAQ_MEM_RW_ORDER)
#define MUDAQ_MEM_RW_MASK (MUDAQ_MEM_RO_LEN - 1)

#define MUDAQ_MEM_RO_INDEX 3
#define MUDAQ_MEM_RO_ORDER 16
#define MUDAQ_MEM_RO_LEN (1 << MUDAQ_MEM_RO_ORDER)
#define MUDAQ_MEM_RO_MASK (MUDAQ_MEM_RO_LEN - 1)
// dma buffers
#define MUDAQ_DMABUF_CTRL_INDEX 4
#define MUDAQ_DMABUF_CTRL_WORDS 4 // in words
// data buffer is 512MB ( = 128k uint32 words)
// currently the maximum is 4GB, if larger buffer is needed, the variable on the FPGA looping through the ring buffer
// needs to have more bits
#define MUDAQ_DMABUF_DATA_ORDER 25 // 29, 25 for 32 MB
#define MUDAQ_DMABUF_DATA_LEN (1 << MUDAQ_DMABUF_DATA_ORDER) // in bytes
#define MUDAQ_DMABUF_DATA_MASK (MUDAQ_DMABUF_DATA_LEN - 1)
#define MUDAQ_DMABUF_DATA_ORDER_WORDS (MUDAQ_DMABUF_DATA_ORDER - 2)
#define MUDAQ_DMABUF_DATA_WORDS (1 << MUDAQ_DMABUF_DATA_ORDER_WORDS) // in words
#define MUDAQ_DMABUF_DATA_WORDS_MASK (MUDAQ_DMABUF_DATA_WORDS - 1)

// fpga uses 8kb blocks internally. again given in uint32_t elements
// Actually it's 0xFFFF 32 bit words
#define MUDAQ_BLOCK_ORDER 9
#define MUDAQ_BLOCK_LEN (1 << MUDAQ_BLOCK_ORDER)
#define MUDAQ_BLOCK_MASK (MUDAQ_BLOCK_LEN - 1)

/* smallest data unit is u32. all addresses / sizes must be u32 aligned */
/* 128 bit control buffer */
#define MUDAQ_BUFFER_CTRL_SIZE (4 * 4)

#define PAGES_PER_INTERRUPT 64
#define N_BUFFERS  (MUDAQ_DMABUF_DATA_LEN / ( PAGES_PER_INTERRUPT * PAGE_SIZE ))
#define N_PAGES  (MUDAQ_DMABUF_DATA_LEN / PAGE_SIZE)


// A10 registers
#define LED_REGISTER_W		0x00
#define RESET_REGISTER_W		0x01
#define RESET_BIT_ALL		0
#define GET_RESET_BIT_ALL(REG) ((REG>>0)& 0x1) 
#define SET_RESET_BIT_ALL(REG) ((1<<0)| REG) 
#define UNSET_RESET_BIT_ALL(REG) ((~(1<<0)) & REG) 
#define RESET_BIT_DATAGEN		1
#define GET_RESET_BIT_DATAGEN(REG) ((REG>>1)& 0x1) 
#define SET_RESET_BIT_DATAGEN(REG) ((1<<1)| REG) 
#define UNSET_RESET_BIT_DATAGEN(REG) ((~(1<<1)) & REG) 
#define RESET_BIT_SWB_STREAM_MERGER		2
#define GET_RESET_BIT_SWB_STREAM_MERGER(REG) ((REG>>2)& 0x1) 
#define SET_RESET_BIT_SWB_STREAM_MERGER(REG) ((1<<2)| REG) 
#define UNSET_RESET_BIT_SWB_STREAM_MERGER(REG) ((~(1<<2)) & REG) 
#define RESET_BIT_SWB_TIME_MERGER		3
#define GET_RESET_BIT_SWB_TIME_MERGER(REG) ((REG>>3)& 0x1) 
#define SET_RESET_BIT_SWB_TIME_MERGER(REG) ((1<<3)| REG) 
#define UNSET_RESET_BIT_SWB_TIME_MERGER(REG) ((~(1<<3)) & REG) 
#define RESET_BIT_RECEIVER		4
#define GET_RESET_BIT_RECEIVER(REG) ((REG>>4)& 0x1) 
#define SET_RESET_BIT_RECEIVER(REG) ((1<<4)| REG) 
#define UNSET_RESET_BIT_RECEIVER(REG) ((~(1<<4)) & REG) 
#define RESET_BIT_DATAFIFO		5
#define GET_RESET_BIT_DATAFIFO(REG) ((REG>>5)& 0x1) 
#define SET_RESET_BIT_DATAFIFO(REG) ((1<<5)| REG) 
#define UNSET_RESET_BIT_DATAFIFO(REG) ((~(1<<5)) & REG) 
#define RESET_BIT_FIFOPLL		6
#define GET_RESET_BIT_FIFOPLL(REG) ((REG>>6)& 0x1) 
#define SET_RESET_BIT_FIFOPLL(REG) ((1<<6)| REG) 
#define UNSET_RESET_BIT_FIFOPLL(REG) ((~(1<<6)) & REG) 
#define RESET_BIT_SC_SECONDARY		7
#define GET_RESET_BIT_SC_SECONDARY(REG) ((REG>>7)& 0x1) 
#define SET_RESET_BIT_SC_SECONDARY(REG) ((1<<7)| REG) 
#define UNSET_RESET_BIT_SC_SECONDARY(REG) ((~(1<<7)) & REG) 
#define RESET_BIT_SC_MAIN		8
#define GET_RESET_BIT_SC_MAIN(REG) ((REG>>8)& 0x1) 
#define SET_RESET_BIT_SC_MAIN(REG) ((1<<8)| REG) 
#define UNSET_RESET_BIT_SC_MAIN(REG) ((~(1<<8)) & REG) 
#define RESET_BIT_PCIE_LOCAL		9
#define GET_RESET_BIT_PCIE_LOCAL(REG) ((REG>>9)& 0x1) 
#define SET_RESET_BIT_PCIE_LOCAL(REG) ((1<<9)| REG) 
#define UNSET_RESET_BIT_PCIE_LOCAL(REG) ((~(1<<9)) & REG) 
#define RESET_BIT_TOP_PROC		10
#define GET_RESET_BIT_TOP_PROC(REG) ((REG>>10)& 0x1) 
#define SET_RESET_BIT_TOP_PROC(REG) ((1<<10)| REG) 
#define UNSET_RESET_BIT_TOP_PROC(REG) ((~(1<<10)) & REG) 
#define RESET_BIT_PCIE_APPL		12
#define GET_RESET_BIT_PCIE_APPL(REG) ((REG>>12)& 0x1) 
#define SET_RESET_BIT_PCIE_APPL(REG) ((1<<12)| REG) 
#define UNSET_RESET_BIT_PCIE_APPL(REG) ((~(1<<12)) & REG) 
#define RESET_BIT_EVENT_COUNTER		13
#define GET_RESET_BIT_EVENT_COUNTER(REG) ((REG>>13)& 0x1) 
#define SET_RESET_BIT_EVENT_COUNTER(REG) ((1<<13)| REG) 
#define UNSET_RESET_BIT_EVENT_COUNTER(REG) ((~(1<<13)) & REG) 
#define RESET_BIT_DMA_EVAL		14
#define GET_RESET_BIT_DMA_EVAL(REG) ((REG>>14)& 0x1) 
#define SET_RESET_BIT_DMA_EVAL(REG) ((1<<14)| REG) 
#define UNSET_RESET_BIT_DMA_EVAL(REG) ((~(1<<14)) & REG) 
#define RESET_BIT_LINK_TEST		15
#define GET_RESET_BIT_LINK_TEST(REG) ((REG>>15)& 0x1) 
#define SET_RESET_BIT_LINK_TEST(REG) ((1<<15)| REG) 
#define UNSET_RESET_BIT_LINK_TEST(REG) ((~(1<<15)) & REG) 
#define RESET_BIT_RUN_START_ACK		16
#define GET_RESET_BIT_RUN_START_ACK(REG) ((REG>>16)& 0x1) 
#define SET_RESET_BIT_RUN_START_ACK(REG) ((1<<16)| REG) 
#define UNSET_RESET_BIT_RUN_START_ACK(REG) ((~(1<<16)) & REG) 
#define RESET_BIT_RUN_END_ACK		17
#define GET_RESET_BIT_RUN_END_ACK(REG) ((REG>>17)& 0x1) 
#define SET_RESET_BIT_RUN_END_ACK(REG) ((1<<17)| REG) 
#define UNSET_RESET_BIT_RUN_END_ACK(REG) ((~(1<<17)) & REG) 
#define RESET_BIT_NIOS		18
#define GET_RESET_BIT_NIOS(REG) ((REG>>18)& 0x1) 
#define SET_RESET_BIT_NIOS(REG) ((1<<18)| REG) 
#define UNSET_RESET_BIT_NIOS(REG) ((~(1<<18)) & REG) 
#define RESET_BIT_DDR		19
#define GET_RESET_BIT_DDR(REG) ((REG>>19)& 0x1) 
#define SET_RESET_BIT_DDR(REG) ((1<<19)| REG) 
#define UNSET_RESET_BIT_DDR(REG) ((~(1<<19)) & REG) 
#define RESET_BIT_DATAFLOW		20
#define GET_RESET_BIT_DATAFLOW(REG) ((REG>>20)& 0x1) 
#define SET_RESET_BIT_DATAFLOW(REG) ((1<<20)| REG) 
#define UNSET_RESET_BIT_DATAFLOW(REG) ((~(1<<20)) & REG) 
#define RESET_BIT_LINK_MERGER		21
#define GET_RESET_BIT_LINK_MERGER(REG) ((REG>>21)& 0x1) 
#define SET_RESET_BIT_LINK_MERGER(REG) ((1<<21)| REG) 
#define UNSET_RESET_BIT_LINK_MERGER(REG) ((~(1<<21)) & REG) 
#define RESET_BIT_DATA_PATH		22
#define GET_RESET_BIT_DATA_PATH(REG) ((REG>>22)& 0x1) 
#define SET_RESET_BIT_DATA_PATH(REG) ((1<<22)| REG) 
#define UNSET_RESET_BIT_DATA_PATH(REG) ((~(1<<22)) & REG) 
#define RESET_BIT_FARM_DATA_PATH		23
#define GET_RESET_BIT_FARM_DATA_PATH(REG) ((REG>>23)& 0x1) 
#define SET_RESET_BIT_FARM_DATA_PATH(REG) ((1<<23)| REG) 
#define UNSET_RESET_BIT_FARM_DATA_PATH(REG) ((~(1<<23)) & REG) 
#define RESET_BIT_FARM_STREAM_MERGER		24
#define GET_RESET_BIT_FARM_STREAM_MERGER(REG) ((REG>>24)& 0x1) 
#define SET_RESET_BIT_FARM_STREAM_MERGER(REG) ((1<<24)| REG) 
#define UNSET_RESET_BIT_FARM_STREAM_MERGER(REG) ((~(1<<24)) & REG) 
#define RESET_BIT_FARM_TIME_MERGER		25
#define GET_RESET_BIT_FARM_TIME_MERGER(REG) ((REG>>25)& 0x1) 
#define SET_RESET_BIT_FARM_TIME_MERGER(REG) ((1<<25)| REG) 
#define UNSET_RESET_BIT_FARM_TIME_MERGER(REG) ((~(1<<25)) & REG) 
#define RESET_BIT_LINK_LOCKED		26
#define GET_RESET_BIT_LINK_LOCKED(REG) ((REG>>26)& 0x1) 
#define SET_RESET_BIT_LINK_LOCKED(REG) ((1<<26)| REG) 
#define UNSET_RESET_BIT_LINK_LOCKED(REG) ((~(1<<26)) & REG) 
#define RESET_BIT_GLOBAL_TS		27
#define GET_RESET_BIT_GLOBAL_TS(REG) ((REG>>27)& 0x1) 
#define SET_RESET_BIT_GLOBAL_TS(REG) ((1<<27)| REG) 
#define UNSET_RESET_BIT_GLOBAL_TS(REG) ((~(1<<27)) & REG) 
#define RESET_BIT_FARM_BLOCK		28
#define GET_RESET_BIT_FARM_BLOCK(REG) ((REG>>28)& 0x1) 
#define SET_RESET_BIT_FARM_BLOCK(REG) ((1<<28)| REG) 
#define UNSET_RESET_BIT_FARM_BLOCK(REG) ((~(1<<28)) & REG) 
#define RESET_BIT_SWB_COUNTERS		29
#define GET_RESET_BIT_SWB_COUNTERS(REG) ((REG>>29)& 0x1) 
#define SET_RESET_BIT_SWB_COUNTERS(REG) ((1<<29)| REG) 
#define UNSET_RESET_BIT_SWB_COUNTERS(REG) ((~(1<<29)) & REG) 
#define RESET_BIT_PCIE		31
#define GET_RESET_BIT_PCIE(REG) ((REG>>31)& 0x1) 
#define SET_RESET_BIT_PCIE(REG) ((1<<31)| REG) 
#define UNSET_RESET_BIT_PCIE(REG) ((~(1<<31)) & REG) 
#define DATAGENERATOR_REGISTER_W		0x02
#define DATAGENERATOR_BIT_ENABLE		0
#define GET_DATAGENERATOR_BIT_ENABLE(REG) ((REG>>0)& 0x1) 
#define SET_DATAGENERATOR_BIT_ENABLE(REG) ((1<<0)| REG) 
#define UNSET_DATAGENERATOR_BIT_ENABLE(REG) ((~(1<<0)) & REG) 
#define DATAGENERATOR_BIT_ENABLE_PIXEL		1
#define GET_DATAGENERATOR_BIT_ENABLE_PIXEL(REG) ((REG>>1)& 0x1) 
#define SET_DATAGENERATOR_BIT_ENABLE_PIXEL(REG) ((1<<1)| REG) 
#define UNSET_DATAGENERATOR_BIT_ENABLE_PIXEL(REG) ((~(1<<1)) & REG) 
#define DATAGENERATOR_BIT_ENABLE_FIBRE		2
#define GET_DATAGENERATOR_BIT_ENABLE_FIBRE(REG) ((REG>>2)& 0x1) 
#define SET_DATAGENERATOR_BIT_ENABLE_FIBRE(REG) ((1<<2)| REG) 
#define UNSET_DATAGENERATOR_BIT_ENABLE_FIBRE(REG) ((~(1<<2)) & REG) 
#define DATAGENERATOR_BIT_ENABLE_TILE		3
#define GET_DATAGENERATOR_BIT_ENABLE_TILE(REG) ((REG>>3)& 0x1) 
#define SET_DATAGENERATOR_BIT_ENABLE_TILE(REG) ((1<<3)| REG) 
#define UNSET_DATAGENERATOR_BIT_ENABLE_TILE(REG) ((~(1<<3)) & REG) 
#define DATAGENERATOR_BIT_ENABLE_TEST		4
#define GET_DATAGENERATOR_BIT_ENABLE_TEST(REG) ((REG>>4)& 0x1) 
#define SET_DATAGENERATOR_BIT_ENABLE_TEST(REG) ((1<<4)| REG) 
#define UNSET_DATAGENERATOR_BIT_ENABLE_TEST(REG) ((~(1<<4)) & REG) 
#define DATAGENERATOR_BIT_DMA_HALFFUL_MODE		5
#define GET_DATAGENERATOR_BIT_DMA_HALFFUL_MODE(REG) ((REG>>5)& 0x1) 
#define SET_DATAGENERATOR_BIT_DMA_HALFFUL_MODE(REG) ((1<<5)| REG) 
#define UNSET_DATAGENERATOR_BIT_DMA_HALFFUL_MODE(REG) ((~(1<<5)) & REG) 
#define DATAGENERATOR_FRACCOUNT_RANGE_HI		15
#define DATAGENERATOR_FRACCOUNT_RANGE_LOW		8
#define GET_DATAGENERATOR_FRACCOUNT_RANGE(REG) ((REG>>8)&0xff) 
#define SET_DATAGENERATOR_FRACCOUNT_RANGE(REG, VAL) ((REG & (~(0xff<< 8))) | ((VAL & 0xff)<< 8))  
#define DATAGENERATOR_NPIXEL_RANGE_HI		15
#define DATAGENERATOR_NPIXEL_RANGE_LOW		8
#define GET_DATAGENERATOR_NPIXEL_RANGE(REG) ((REG>>8)&0xff) 
#define SET_DATAGENERATOR_NPIXEL_RANGE(REG, VAL) ((REG & (~(0xff<< 8))) | ((VAL & 0xff)<< 8))  
#define DATAGENERATOR_NFIBRE_RANGE_HI		23
#define DATAGENERATOR_NFIBRE_RANGE_LOW		16
#define GET_DATAGENERATOR_NFIBRE_RANGE(REG) ((REG>>16)&0xff) 
#define SET_DATAGENERATOR_NFIBRE_RANGE(REG, VAL) ((REG & (~(0xff<< 16))) | ((VAL & 0xff)<< 16))  
#define DATAGENERATOR_NTILE_RANGE_HI		31
#define DATAGENERATOR_NTILE_RANGE_LOW		24
#define GET_DATAGENERATOR_NTILE_RANGE(REG) ((REG>>24)&0xff) 
#define SET_DATAGENERATOR_NTILE_RANGE(REG, VAL) ((REG & (~(0xff<< 24))) | ((VAL & 0xff)<< 24))  
#define DATAGENERATOR_DIVIDER_REGISTER_W		0x03
#define SWB_DATA_TYPE_REGISTER_W		0x04
#define DMA_CONTROL_W		0x05
#define DMA_CONTROL_COUNTER_RANGE_HI		15
#define DMA_CONTROL_COUNTER_RANGE_LOW		0
#define GET_DMA_CONTROL_COUNTER_RANGE(REG) ((REG>>0)&0xffff) 
#define SET_DMA_CONTROL_COUNTER_RANGE(REG, VAL) ((REG & (~(0xffff<< 0))) | ((VAL & 0xffff)<< 0))  
#define DMA_SLOW_DOWN_REGISTER_W		0x06
#define LINK_TEST_REGISTER_W		0x07
#define LINK_TEST_BIT_ENABLE		0
#define GET_LINK_TEST_BIT_ENABLE(REG) ((REG>>0)& 0x1) 
#define SET_LINK_TEST_BIT_ENABLE(REG) ((1<<0)| REG) 
#define UNSET_LINK_TEST_BIT_ENABLE(REG) ((~(1<<0)) & REG) 
#define RUN_NR_REGISTER_W		0x08
#define RUN_NR_ADDR_REGISTER_W		0x09
#define FEB_ENABLE_REGISTER_W		0x0a
#define DATA_LINK_MASK_REGISTER_W		0x0b
#define GET_N_DMA_WORDS_REGISTER_W		0x0c
#define SC_MAIN_ENABLE_REGISTER_W		0x0d
#define SC_MAIN_LENGTH_REGISTER_W		0x0e
#define SWB_GENERIC_MASK_REGISTER_W		0x0f
#define SWB_LINK_MASK_PIXEL_REGISTER_W		0x10
#define SWB_LINK_MASK_SCIFI_REGISTER_W		0x11
#define SWB_LINK_MASK_TILES_REGISTER_W		0x12
#define SWB_READOUT_STATE_REGISTER_W		0x13
#define USE_BIT_GEN_LINK		0
#define GET_USE_BIT_GEN_LINK(REG) ((REG>>0)& 0x1) 
#define SET_USE_BIT_GEN_LINK(REG) ((1<<0)| REG) 
#define UNSET_USE_BIT_GEN_LINK(REG) ((~(1<<0)) & REG) 
#define USE_BIT_STREAM		1
#define GET_USE_BIT_STREAM(REG) ((REG>>1)& 0x1) 
#define SET_USE_BIT_STREAM(REG) ((1<<1)| REG) 
#define UNSET_USE_BIT_STREAM(REG) ((~(1<<1)) & REG) 
#define USE_BIT_MERGER		2
#define GET_USE_BIT_MERGER(REG) ((REG>>2)& 0x1) 
#define SET_USE_BIT_MERGER(REG) ((1<<2)| REG) 
#define UNSET_USE_BIT_MERGER(REG) ((~(1<<2)) & REG) 
#define USE_BIT_GEN_MERGER		4
#define GET_USE_BIT_GEN_MERGER(REG) ((REG>>4)& 0x1) 
#define SET_USE_BIT_GEN_MERGER(REG) ((1<<4)| REG) 
#define UNSET_USE_BIT_GEN_MERGER(REG) ((~(1<<4)) & REG) 
#define USE_BIT_FARM		5
#define GET_USE_BIT_FARM(REG) ((REG>>5)& 0x1) 
#define SET_USE_BIT_FARM(REG) ((1<<5)| REG) 
#define UNSET_USE_BIT_FARM(REG) ((~(1<<5)) & REG) 
#define USE_BIT_TEST		6
#define GET_USE_BIT_TEST(REG) ((REG>>6)& 0x1) 
#define SET_USE_BIT_TEST(REG) ((1<<6)| REG) 
#define UNSET_USE_BIT_TEST(REG) ((~(1<<6)) & REG) 
#define USE_BIT_PIXEL_US		7
#define GET_USE_BIT_PIXEL_US(REG) ((REG>>7)& 0x1) 
#define SET_USE_BIT_PIXEL_US(REG) ((1<<7)| REG) 
#define UNSET_USE_BIT_PIXEL_US(REG) ((~(1<<7)) & REG) 
#define USE_BIT_PIXEL_DS		8
#define GET_USE_BIT_PIXEL_DS(REG) ((REG>>8)& 0x1) 
#define SET_USE_BIT_PIXEL_DS(REG) ((1<<8)| REG) 
#define UNSET_USE_BIT_PIXEL_DS(REG) ((~(1<<8)) & REG) 
#define USE_BIT_SCIFI		9
#define GET_USE_BIT_SCIFI(REG) ((REG>>9)& 0x1) 
#define SET_USE_BIT_SCIFI(REG) ((1<<9)| REG) 
#define UNSET_USE_BIT_SCIFI(REG) ((~(1<<9)) & REG) 
#define USE_BIT_TEST_ERROR		10
#define GET_USE_BIT_TEST_ERROR(REG) ((REG>>10)& 0x1) 
#define SET_USE_BIT_TEST_ERROR(REG) ((1<<10)| REG) 
#define UNSET_USE_BIT_TEST_ERROR(REG) ((~(1<<10)) & REG) 
#define USE_BIT_DDR		11
#define GET_USE_BIT_DDR(REG) ((REG>>11)& 0x1) 
#define SET_USE_BIT_DDR(REG) ((1<<11)| REG) 
#define UNSET_USE_BIT_DDR(REG) ((~(1<<11)) & REG) 
#define USE_BIT_ALL		12
#define GET_USE_BIT_ALL(REG) ((REG>>12)& 0x1) 
#define SET_USE_BIT_ALL(REG) ((1<<12)| REG) 
#define UNSET_USE_BIT_ALL(REG) ((~(1<<12)) & REG) 
#define USE_BIT_TEST_DATA		13
#define GET_USE_BIT_TEST_DATA(REG) ((REG>>13)& 0x1) 
#define SET_USE_BIT_TEST_DATA(REG) ((1<<13)| REG) 
#define UNSET_USE_BIT_TEST_DATA(REG) ((~(1<<13)) & REG) 
#define USE_BIT_SUBHDR_SUPPRESS		14
#define GET_USE_BIT_SUBHDR_SUPPRESS(REG) ((REG>>14)& 0x1) 
#define SET_USE_BIT_SUBHDR_SUPPRESS(REG) ((1<<14)| REG) 
#define UNSET_USE_BIT_SUBHDR_SUPPRESS(REG) ((~(1<<14)) & REG) 
#define USE_BIT_HEAD_SUPPRESS		15
#define GET_USE_BIT_HEAD_SUPPRESS(REG) ((REG>>15)& 0x1) 
#define SET_USE_BIT_HEAD_SUPPRESS(REG) ((1<<15)| REG) 
#define UNSET_USE_BIT_HEAD_SUPPRESS(REG) ((~(1<<15)) & REG) 
#define USE_BIT_INJECTION		16
#define GET_USE_BIT_INJECTION(REG) ((REG>>16)& 0x1) 
#define SET_USE_BIT_INJECTION(REG) ((1<<16)| REG) 
#define UNSET_USE_BIT_INJECTION(REG) ((~(1<<16)) & REG) 
#define USE_BIT_WRITE_BUFFER_INJECTION		17
#define GET_USE_BIT_WRITE_BUFFER_INJECTION(REG) ((REG>>17)& 0x1) 
#define SET_USE_BIT_WRITE_BUFFER_INJECTION(REG) ((1<<17)| REG) 
#define UNSET_USE_BIT_WRITE_BUFFER_INJECTION(REG) ((~(1<<17)) & REG) 
#define USE_BIT_GENERIC		18
#define GET_USE_BIT_GENERIC(REG) ((REG>>18)& 0x1) 
#define SET_USE_BIT_GENERIC(REG) ((1<<18)| REG) 
#define UNSET_USE_BIT_GENERIC(REG) ((~(1<<18)) & REG) 
#define USE_BIT_FEB_SYNC		19
#define GET_USE_BIT_FEB_SYNC(REG) ((REG>>19)& 0x1) 
#define SET_USE_BIT_FEB_SYNC(REG) ((1<<19)| REG) 
#define UNSET_USE_BIT_FEB_SYNC(REG) ((~(1<<19)) & REG) 
#define SWB_READOUT_LINK_REGISTER_W		0x14
#define SWB_COUNTER_REGISTER_W		0x15
#define FARM_READOUT_STATE_REGISTER_W		0x16
#define FARM_DATA_TYPE_REGISTER_W		0x17
#define FARM_DATA_TYPE_ADDR_RANGE_HI		1
#define FARM_DATA_TYPE_ADDR_RANGE_LOW		0
#define GET_FARM_DATA_TYPE_ADDR_RANGE(REG) ((REG>>0)&0x3) 
#define SET_FARM_DATA_TYPE_ADDR_RANGE(REG, VAL) ((REG & (~(0x3<< 0))) | ((VAL & 0x3)<< 0))  
#define FARM_EVENT_ID_ADDR_RANGE_HI		17
#define FARM_EVENT_ID_ADDR_RANGE_LOW		2
#define GET_FARM_EVENT_ID_ADDR_RANGE(REG) ((REG>>2)&0xffff) 
#define SET_FARM_EVENT_ID_ADDR_RANGE(REG, VAL) ((REG & (~(0xffff<< 2))) | ((VAL & 0xffff)<< 2))  
#define INJECTION_WAIT_W		0x18
#define SWB_SUBHEAD_SUPPRESS_REGISTER_W		0x19
#define SWB_HEAD_SUPPRESS_REGISTER_W		0x1a
#define SWB_ZERO_HISTOS_REGISTER_W		0x1b
#define SWB_HISTO_ADDR_REGISTER_W		0x1c
#define SWB_HISTO_CHIP_SELECT_REGISTER_W		0x1d
#define SWB_HISTO_LINK_SELECT_REGISTER_W		0x1e
#define SWB_LOOKUP_CTRL_REGISTER_W		0x1f
#define SWB_LOOKUP_DS_CTRL_REGISTER_W		0x20
#define SWB_LOOKUP_CTRL_ADDR_RANGE_HI		6
#define SWB_LOOKUP_CTRL_ADDR_RANGE_LOW		0
#define GET_SWB_LOOKUP_CTRL_ADDR_RANGE(REG) ((REG>>0)&0x7f) 
#define SET_SWB_LOOKUP_CTRL_ADDR_RANGE(REG, VAL) ((REG & (~(0x7f<< 0))) | ((VAL & 0x7f)<< 0))  
#define SWB_LOOKUP_CTRL_COMMAND_RANGE_HI		8
#define SWB_LOOKUP_CTRL_COMMAND_RANGE_LOW		7
#define GET_SWB_LOOKUP_CTRL_COMMAND_RANGE(REG) ((REG>>7)&0x3) 
#define SET_SWB_LOOKUP_CTRL_COMMAND_RANGE(REG, VAL) ((REG & (~(0x3<< 7))) | ((VAL & 0x3)<< 7))  
#define SWB_LOOKUP_CTRL_VALUE_RANGE_HI		22
#define SWB_LOOKUP_CTRL_VALUE_RANGE_LOW		9
#define GET_SWB_LOOKUP_CTRL_VALUE_RANGE(REG) ((REG>>9)&0x3fff) 
#define SET_SWB_LOOKUP_CTRL_VALUE_RANGE(REG, VAL) ((REG & (~(0x3fff<< 9))) | ((VAL & 0x3fff)<< 9))  
#define DDR_CONTROL_W		0x21
#define DDR_BIT_ENABLE_A		0
#define GET_DDR_BIT_ENABLE_A(REG) ((REG>>0)& 0x1) 
#define SET_DDR_BIT_ENABLE_A(REG) ((1<<0)| REG) 
#define UNSET_DDR_BIT_ENABLE_A(REG) ((~(1<<0)) & REG) 
#define DDR_BIT_COUNTERTEST_A		1
#define GET_DDR_BIT_COUNTERTEST_A(REG) ((REG>>1)& 0x1) 
#define SET_DDR_BIT_COUNTERTEST_A(REG) ((1<<1)| REG) 
#define UNSET_DDR_BIT_COUNTERTEST_A(REG) ((~(1<<1)) & REG) 
#define DDR_BIT_ENABLE_B		16
#define GET_DDR_BIT_ENABLE_B(REG) ((REG>>16)& 0x1) 
#define SET_DDR_BIT_ENABLE_B(REG) ((1<<16)| REG) 
#define UNSET_DDR_BIT_ENABLE_B(REG) ((~(1<<16)) & REG) 
#define DDR_BIT_COUNTERTEST_B		17
#define GET_DDR_BIT_COUNTERTEST_B(REG) ((REG>>17)& 0x1) 
#define SET_DDR_BIT_COUNTERTEST_B(REG) ((1<<17)| REG) 
#define UNSET_DDR_BIT_COUNTERTEST_B(REG) ((~(1<<17)) & REG) 
#define FARM_LINK_MASK_REGISTER_W		0x22
#define DATA_REQ_A_W		0x23
#define DATA_REQ_B_W		0x24
#define DATA_TSBLOCK_DONE_W		0x25
#define FARM_ID_REGISTER_W		0x26
#define FARM_REQ_EVENTS_W		0x27
#define FARM_CTL_REGISTER_W		0x28
#define USE_BIT_PIXEL_ONLY		0
#define GET_USE_BIT_PIXEL_ONLY(REG) ((REG>>0)& 0x1) 
#define SET_USE_BIT_PIXEL_ONLY(REG) ((1<<0)| REG) 
#define UNSET_USE_BIT_PIXEL_ONLY(REG) ((~(1<<0)) & REG) 
#define USE_BIT_SCIFI_ONLY		1
#define GET_USE_BIT_SCIFI_ONLY(REG) ((REG>>1)& 0x1) 
#define SET_USE_BIT_SCIFI_ONLY(REG) ((1<<1)| REG) 
#define UNSET_USE_BIT_SCIFI_ONLY(REG) ((~(1<<1)) & REG) 
#define RESET_LINK_CTL_REGISTER_W		0x29
#define RESET_LINK_COMMAND_RANGE_HI		7
#define RESET_LINK_COMMAND_RANGE_LOW		0
#define GET_RESET_LINK_COMMAND_RANGE(REG) ((REG>>0)&0xff) 
#define SET_RESET_LINK_COMMAND_RANGE(REG, VAL) ((REG & (~(0xff<< 0))) | ((VAL & 0xff)<< 0))  
#define RESET_LINK_FEB_RANGE_HI		31
#define RESET_LINK_FEB_RANGE_LOW		29
#define GET_RESET_LINK_FEB_RANGE(REG) ((REG>>29)&0x7) 
#define SET_RESET_LINK_FEB_RANGE(REG, VAL) ((REG & (~(0x7<< 29))) | ((VAL & 0x7)<< 29))  
#define RESET_LINK_RUN_NUMBER_REGISTER_W		0x2a
#define FARM_EVENT_ID_REGISTER_W		0x2b
#define FARM_GPU_EVENT_SIZE_W		0x2c
#define FARM_GPU_EVENT_PADDING_W		0x2d
#define FARM_SERIAL_NUMBER_W		0x2e
#define XCVR_CTRL_REGISTER_W		0x2f
#define XCVR_CTRL_CH_RANGE_HI		21
#define XCVR_CTRL_CH_RANGE_LOW		16
#define GET_XCVR_CTRL_CH_RANGE(REG) ((REG>>16)&0x3f) 
#define SET_XCVR_CTRL_CH_RANGE(REG, VAL) ((REG & (~(0x3f<< 16))) | ((VAL & 0x3f)<< 16))  
#define XCVR_CTRL_REG_RANGE_HI		7
#define XCVR_CTRL_REG_RANGE_LOW		0
#define GET_XCVR_CTRL_REG_RANGE(REG) ((REG>>0)&0xff) 
#define SET_XCVR_CTRL_REG_RANGE(REG, VAL) ((REG & (~(0xff<< 0))) | ((VAL & 0xff)<< 0))  
#define CLK_LINK_0_REGISTER_W		0x30
#define CLK_LINK_1_REGISTER_W		0x31
#define CLK_LINK_2_REGISTER_W		0x32
#define CLK_LINK_3_REGISTER_W		0x33
#define CLK_LINK_REST_REGISTER_W		0x34
#define REST_0_RANGE_HI		7
#define REST_0_RANGE_LOW		0
#define GET_REST_0_RANGE(REG) ((REG>>0)&0xff) 
#define SET_REST_0_RANGE(REG, VAL) ((REG & (~(0xff<< 0))) | ((VAL & 0xff)<< 0))  
#define REST_1_RANGE_HI		15
#define REST_1_RANGE_LOW		8
#define GET_REST_1_RANGE(REG) ((REG>>8)&0xff) 
#define SET_REST_1_RANGE(REG, VAL) ((REG & (~(0xff<< 8))) | ((VAL & 0xff)<< 8))  
#define REST_2_RANGE_HI		23
#define REST_2_RANGE_LOW		16
#define GET_REST_2_RANGE(REG) ((REG>>16)&0xff) 
#define SET_REST_2_RANGE(REG, VAL) ((REG & (~(0xff<< 16))) | ((VAL & 0xff)<< 16))  
#define REST_3_RANGE_HI		31
#define REST_3_RANGE_LOW		24
#define GET_REST_3_RANGE(REG) ((REG>>24)&0xff) 
#define SET_REST_3_RANGE(REG, VAL) ((REG & (~(0xff<< 24))) | ((VAL & 0xff)<< 24))  
#define GET_N_GPU_EVENTS_REGISTER_W		0x35
#define DMA2_CTRL_ADDR_LOW_REGISTER_W		0x36
#define DMA2_CTRL_ADDR_HI_REGISTER_W		0x37
#define DMA_REGISTER_W		0x38
#define DMA_BIT_ENABLE		0
#define GET_DMA_BIT_ENABLE(REG) ((REG>>0)& 0x1) 
#define SET_DMA_BIT_ENABLE(REG) ((1<<0)| REG) 
#define UNSET_DMA_BIT_ENABLE(REG) ((~(1<<0)) & REG) 
#define DMA_BIT_NOW		1
#define GET_DMA_BIT_NOW(REG) ((REG>>1)& 0x1) 
#define SET_DMA_BIT_NOW(REG) ((1<<1)| REG) 
#define UNSET_DMA_BIT_NOW(REG) ((~(1<<1)) & REG) 
#define DMA_BIT_ADDR_WRITE_ENABLE		2
#define GET_DMA_BIT_ADDR_WRITE_ENABLE(REG) ((REG>>2)& 0x1) 
#define SET_DMA_BIT_ADDR_WRITE_ENABLE(REG) ((1<<2)| REG) 
#define UNSET_DMA_BIT_ADDR_WRITE_ENABLE(REG) ((~(1<<2)) & REG) 
#define DMA_BIT_ENABLE_INTERRUPTS		3
#define GET_DMA_BIT_ENABLE_INTERRUPTS(REG) ((REG>>3)& 0x1) 
#define SET_DMA_BIT_ENABLE_INTERRUPTS(REG) ((1<<3)| REG) 
#define UNSET_DMA_BIT_ENABLE_INTERRUPTS(REG) ((~(1<<3)) & REG) 
#define DMA2_BIT_ENABLE		16
#define GET_DMA2_BIT_ENABLE(REG) ((REG>>16)& 0x1) 
#define SET_DMA2_BIT_ENABLE(REG) ((1<<16)| REG) 
#define UNSET_DMA2_BIT_ENABLE(REG) ((~(1<<16)) & REG) 
#define DMA2_BIT_NOW		17
#define GET_DMA2_BIT_NOW(REG) ((REG>>17)& 0x1) 
#define SET_DMA2_BIT_NOW(REG) ((1<<17)| REG) 
#define UNSET_DMA2_BIT_NOW(REG) ((~(1<<17)) & REG) 
#define DMA2_BIT_ADDR_WRITE_ENABLE		18
#define GET_DMA2_BIT_ADDR_WRITE_ENABLE(REG) ((REG>>18)& 0x1) 
#define SET_DMA2_BIT_ADDR_WRITE_ENABLE(REG) ((1<<18)| REG) 
#define UNSET_DMA2_BIT_ADDR_WRITE_ENABLE(REG) ((~(1<<18)) & REG) 
#define DMA2_BIT_ENABLE_INTERRUPTS		19
#define GET_DMA2_BIT_ENABLE_INTERRUPTS(REG) ((REG>>19)& 0x1) 
#define SET_DMA2_BIT_ENABLE_INTERRUPTS(REG) ((1<<19)| REG) 
#define UNSET_DMA2_BIT_ENABLE_INTERRUPTS(REG) ((~(1<<19)) & REG) 
#define DMA_CTRL_ADDR_LOW_REGISTER_W		0x39
#define DMA_CTRL_ADDR_HI_REGISTER_W		0x3a
#define DMA_DATA_ADDR_LOW_REGISTER_W		0x3b
#define DMA_DATA_ADDR_HI_REGISTER_W		0x3c
#define DMA_RAM_LOCATION_NUM_PAGES_REGISTER_W		0x3d
#define DMA_RAM_LOCATION_RANGE_HI		31
#define DMA_RAM_LOCATION_RANGE_LOW		20
#define GET_DMA_RAM_LOCATION_RANGE(REG) ((REG>>20)&0xfff) 
#define SET_DMA_RAM_LOCATION_RANGE(REG, VAL) ((REG & (~(0xfff<< 20))) | ((VAL & 0xfff)<< 20))  
#define DMA_NUM_PAGES_RANGE_HI		19
#define DMA_NUM_PAGES_RANGE_LOW		0
#define GET_DMA_NUM_PAGES_RANGE(REG) ((REG>>0)&0xfffff) 
#define SET_DMA_NUM_PAGES_RANGE(REG, VAL) ((REG & (~(0xfffff<< 0))) | ((VAL & 0xfffff)<< 0))  
#define DMA_NUM_ADDRESSES_REGISTER_W		0x3e
#define DMA_NUM_ADDRESSES_RANGE_HI		11
#define DMA_NUM_ADDRESSES_RANGE_LOW		0
#define GET_DMA_NUM_ADDRESSES_RANGE(REG) ((REG>>0)&0xfff) 
#define SET_DMA_NUM_ADDRESSES_RANGE(REG, VAL) ((REG & (~(0xfff<< 0))) | ((VAL & 0xfff)<< 0))  
#define DMA2_NUM_ADDRESSES_RANGE_HI		27
#define DMA2_NUM_ADDRESSES_RANGE_LOW		16
#define GET_DMA2_NUM_ADDRESSES_RANGE(REG) ((REG>>16)&0xfff) 
#define SET_DMA2_NUM_ADDRESSES_RANGE(REG, VAL) ((REG & (~(0xfff<< 16))) | ((VAL & 0xfff)<< 16))  
#define PLL_REGISTER_R		0x00
#define DIPSWITCH_RANGE_HI		1
#define DIPSWITCH_RANGE_LOW		0
#define GET_DIPSWITCH_RANGE(REG) ((REG>>0)&0x3) 
#define SET_DIPSWITCH_RANGE(REG, VAL) ((REG & (~(0x3<< 0))) | ((VAL & 0x3)<< 0))  
#define VERSION_REGISTER_R		0x01
#define VERSION_RANGE_HI		27
#define VERSION_RANGE_LOW		0
#define GET_VERSION_RANGE(REG) ((REG>>0)&0xfffffff) 
#define SET_VERSION_RANGE(REG, VAL) ((REG & (~(0xfffffff<< 0))) | ((VAL & 0xfffffff)<< 0))  
#define EVENTCOUNTER_REGISTER_R		0x02
#define EVENTCOUNTER64_REGISTER_R		0x03
#define TIMECOUNTER_LOW_REGISTER_R		0x04
#define TIMECOUNTER_HIGH_REGISTER_R		0x05
#define MEM_WRITEADDR_LOW_REGISTER_R		0x06
#define MEM_WRITEADDR_HIGH_REGISTER_R		0x07
#define EVENT2COUNTER64_REGISTER_R		0x08
#define INADDR32_R		0x09
#define INADDR32_W		0x10
#define CNT_PLL_156_REGISTER_R		0x0a
#define CNT_PLL_250_REGISTER_R		0x0b
#define SWB_HISTOS_DATA_REGISTER_R		0x0c
#define DMA_STATUS_R		0x11
#define PLL_LOCKED_REGISTER_R		0x12
#define DMA_HALFFUL_REGISTER_R		0x14
#define DMA_NOTHALFFUL_REGISTER_R		0x15
#define DMA_ENDEVENT_REGISTER_R		0x16
#define DMA_NOTENDEVENT_REGISTER_R		0x17
#define RUN_NR_ACK_REGISTER_R		0x18
#define RUN_NR_REGISTER_R		0x19
#define RUN_STOP_ACK_REGISTER_R		0x1a
#define BUFFER_STATUS_REGISTER_R		0x1b
#define EVENT_BUILD_STATUS_REGISTER_R		0x1c
#define EVENT_BUILD_IDLE_NOT_HEADER_R		0x1d
#define EVENT_BUILD_SKIP_EVENT_DMA_R		0x1e
#define EVENT_BUILD_CNT_EVENT_DMA_R		0x1f
#define EVENT_BUILD_TAG_FIFO_FULL_R		0x20
#define CNT_FEB_MERGE_TIMEOUT_R		0x25
#define DDR_STATUS_R		0x26
#define DDR_BIT_CAL_SUCCESS		0
#define GET_DDR_BIT_CAL_SUCCESS(REG) ((REG>>0)& 0x1) 
#define SET_DDR_BIT_CAL_SUCCESS(REG) ((1<<0)| REG) 
#define UNSET_DDR_BIT_CAL_SUCCESS(REG) ((~(1<<0)) & REG) 
#define DDR_BIT_CAL_FAIL		1
#define GET_DDR_BIT_CAL_FAIL(REG) ((REG>>1)& 0x1) 
#define SET_DDR_BIT_CAL_FAIL(REG) ((1<<1)| REG) 
#define UNSET_DDR_BIT_CAL_FAIL(REG) ((~(1<<1)) & REG) 
#define DDR_BIT_RESET_N		2
#define GET_DDR_BIT_RESET_N(REG) ((REG>>2)& 0x1) 
#define SET_DDR_BIT_RESET_N(REG) ((1<<2)| REG) 
#define UNSET_DDR_BIT_RESET_N(REG) ((~(1<<2)) & REG) 
#define DDR_BIT_READY		3
#define GET_DDR_BIT_READY(REG) ((REG>>3)& 0x1) 
#define SET_DDR_BIT_READY(REG) ((1<<3)| REG) 
#define UNSET_DDR_BIT_READY(REG) ((~(1<<3)) & REG) 
#define DDR_BIT_TEST_WRITING		4
#define GET_DDR_BIT_TEST_WRITING(REG) ((REG>>4)& 0x1) 
#define SET_DDR_BIT_TEST_WRITING(REG) ((1<<4)| REG) 
#define UNSET_DDR_BIT_TEST_WRITING(REG) ((~(1<<4)) & REG) 
#define DDR_BIT_TEST_READING		5
#define GET_DDR_BIT_TEST_READING(REG) ((REG>>5)& 0x1) 
#define SET_DDR_BIT_TEST_READING(REG) ((1<<5)| REG) 
#define UNSET_DDR_BIT_TEST_READING(REG) ((~(1<<5)) & REG) 
#define DDR_BIT_TEST_DONE		6
#define GET_DDR_BIT_TEST_DONE(REG) ((REG>>6)& 0x1) 
#define SET_DDR_BIT_TEST_DONE(REG) ((1<<6)| REG) 
#define UNSET_DDR_BIT_TEST_DONE(REG) ((~(1<<6)) & REG) 
#define DDR_ERR_R		0x27
#define DATA_TSBLOCKS_R		0x28
#define SC_MAIN_STATUS_REGISTER_R		0x29
#define GLOBAL_TS_LOW_REGISTER_R		0x2a
#define GLOBAL_TS_HIGH_REGISTER_R		0x2b
#define SERIAL_NUM_REGISTER_R		0x2c
#define XCVR_CTRL_REGISTER_R		0x2f
#define DDR_CLK_CNT_R		0x30
#define SC_STATE_REGISTER_R		0x31
#define DMA_CNT_WORDS_REGISTER_R		0x32
#define SWB_COUNTER_REGISTER_R		0x33
#define SWB_LINK_COUNTER_REGISTER_R		0x34
#define RESET_LINK_STATUS_REGISTER_R		0x35
#define LINK_LOCKED_LOW_REGISTER_R		0x36
#define LINK_LOCKED_HIGH_REGISTER_R		0x37
#define DMA_STATUS_REGISTER_R		0x38
#define DMA_DATA_ADDR_LOW_REGISTER_R		0x39
#define DMA_DATA_ADDR_HI_REGISTER_R		0x3a
#define DMA_NUM_PAGES_REGISTER_R		0x3b
#define DMA2_STATUS_REGISTER_R		0x3c
#define DMA2_DATA_ADDR_LOW_REGISTER_R		0x3d
#define DMA2_DATA_ADDR_HI_REGISTER_R		0x3e
#define DMA2_NUM_PAGES_REGISTER_R		0x3f


// FEB registers
#define BIAS_BIT 0
#define GET_BIAS_BIT(REG) ((REG>> 0)& 0x1) 
#define SET_BIAS_BIT(REG) ((1<< 0)| REG) 
#define UNSET_BIAS_BIT(REG) ((~(1<< 0))& REG) 
#define CONF_BIT 1
#define GET_CONF_BIT(REG) ((REG>> 1)& 0x1) 
#define SET_CONF_BIT(REG) ((1<< 1)| REG) 
#define UNSET_CONF_BIT(REG) ((~(1<< 1))& REG) 
#define VDAC_BIT 2
#define GET_VDAC_BIT(REG) ((REG>> 2)& 0x1) 
#define SET_VDAC_BIT(REG) ((1<< 2)| REG) 
#define UNSET_VDAC_BIT(REG) ((~(1<< 2))& REG) 
#define TDAC_BIT 3
#define GET_TDAC_BIT(REG) ((REG>> 3)& 0x1) 
#define SET_TDAC_BIT(REG) ((1<< 3)| REG) 
#define UNSET_TDAC_BIT(REG) ((~(1<< 3))& REG) 
#define MP_CTRL_COMBINED_START_REGISTER_W 0x0400
#define MP_CTRL_TDAC_START_REGISTER_W 0x0430
#define MP_CTRL_CHIP_SELECT1_REGISTER_W 0x0460
#define MP_CTRL_CHIP_SELECT2_REGISTER_W 0x0461
#define MP_CTRL_BIAS_REGISTER_W 0x0462
#define MP_CTRL_CONF_REGISTER_W 0x0463
#define MP_CTRL_VDAC_REGISTER_W 0x0464
#define MP_CTRL_SLOW_DOWN_REGISTER_W 0x0465
#define MP_CTRL_SPI_BUSY_REGISTER_R 0x0466
#define MP_CTRL_DIRECT_SPI_ENABLE_REGISTER_W 0x0467
#define MP_CTRL_SPI_ENABLE_REGISTER_W 0x0468
#define MP_CTRL_DIRECT_SPI_BUSY_REGISTER_R 0x0469
#define MP_CTRL_DIRECT_SPI_START_REGISTER_W 0x046a
#define MP_CTRL_DIRECT_SPI_CHIP_M_LOW_REGISTER_W 0x0480
#define MP_CTRL_DIRECT_SPI_CHIP_M_HIGH_REGISTER_W 0x0481
#define MP_CTRL_RESET_REGISTER_W 0x04a0
#define MP_CTRL_RUN_TEST_REGISTER_W 0x04a1
#define MP_CTRL_N_FREE_PAGES_REGISTER_R 0x04a2
#define MP_CTRL_TESTRAM_RDATA_REGISTER_R 0x04a3
#define MP_CTRL_TESTRAM_WADDR_REGISTER_W 0x04a4
#define MP_CTRL_TESTRAM_RADDR_REGISTER_W 0x04a5
#define MP_CTRL_TESTRAM_WDATA_REGISTER_W 0x04a6
#define MP_CTRL_SLOW_CLK_SHIFT_REGISTER_W 0x04a7
#define MP_CTRL_SIN_INVERT_REGISTER_W 0x04a8
#define MP_CTRL_PIXEL_ADDR_REGISTER0_W 0x04a9
#define MP_CTRL_PIXEL_ADDR_REGISTER1_W 0x04a9
#define MP_CTRL_EXT_CMD_START_REGISTER_W 0x0800
#define MP_READOUT_MODE_REGISTER_W 0x1300
#define INVERT_TS_BIT 0
#define GET_INVERT_TS_BIT(REG) ((REG>> 0)& 0x1) 
#define SET_INVERT_TS_BIT(REG) ((1<< 0)| REG) 
#define UNSET_INVERT_TS_BIT(REG) ((~(1<< 0))& REG) 
#define INVERT_TS2_BIT 1
#define GET_INVERT_TS2_BIT(REG) ((REG>> 1)& 0x1) 
#define SET_INVERT_TS2_BIT(REG) ((1<< 1)| REG) 
#define UNSET_INVERT_TS2_BIT(REG) ((~(1<< 1))& REG) 
#define GRAY_TS_BIT 2
#define GET_GRAY_TS_BIT(REG) ((REG>> 2)& 0x1) 
#define SET_GRAY_TS_BIT(REG) ((1<< 2)| REG) 
#define UNSET_GRAY_TS_BIT(REG) ((~(1<< 2))& REG) 
#define GRAY_TS2_BIT 3
#define GET_GRAY_TS2_BIT(REG) ((REG>> 3)& 0x1) 
#define SET_GRAY_TS2_BIT(REG) ((1<< 3)| REG) 
#define UNSET_GRAY_TS2_BIT(REG) ((~(1<< 3))& REG) 
#define CHIP_ID_MODE_RANGE_HI 5
#define CHIP_ID_MODE_RANGE_LOW 4
#define GET_CHIP_ID_MODE_RANGE(REG) ((REG>>4)&0x3) 
#define SET_CHIP_ID_MODE_RANGE(REG, VAL) ((REG & (~(0x3<< 4))) | ((VAL & 0x3)<< 4)) 
#define TOT_MODE_RANGE_HI 8
#define TOT_MODE_RANGE_LOW 6
#define GET_TOT_MODE_RANGE(REG) ((REG>>6)&0x7) 
#define SET_TOT_MODE_RANGE(REG, VAL) ((REG & (~(0x7<< 6))) | ((VAL & 0x7)<< 6)) 
#define RESET_COUNTERS_BIT 29
#define GET_RESET_COUNTERS_BIT(REG) ((REG>> 29)& 0x1) 
#define SET_RESET_COUNTERS_BIT(REG) ((1<< 29)| REG) 
#define UNSET_RESET_COUNTERS_BIT(REG) ((~(1<< 29))& REG) 
#define REJECT_PACKAGE_WITH_ERROR_BIT 30
#define GET_REJECT_PACKAGE_WITH_ERROR_BIT(REG) ((REG>> 30)& 0x1) 
#define SET_REJECT_PACKAGE_WITH_ERROR_BIT(REG) ((1<< 30)| REG) 
#define UNSET_REJECT_PACKAGE_WITH_ERROR_BIT(REG) ((~(1<< 30))& REG) 
#define SEND_LVDS_ERRORS_BIT 31
#define GET_SEND_LVDS_ERRORS_BIT(REG) ((REG>> 31)& 0x1) 
#define SET_SEND_LVDS_ERRORS_BIT(REG) ((1<< 31)| REG) 
#define UNSET_SEND_LVDS_ERRORS_BIT(REG) ((~(1<< 31))& REG) 
#define MP_LVDS_LINK_MASK_REGISTER_W 0x1301
#define MP_LVDS_LINK_MASK2_REGISTER_W 0x1302
#define MP_DATA_GEN_CONTROL_REGISTER_W 0x1303
#define MP_DATA_GEN_HIT_P_RANGE_HI 3
#define MP_DATA_GEN_HIT_P_RANGE_LOW 0
#define GET_MP_DATA_GEN_HIT_P_RANGE(REG) ((REG>>0)&0xf) 
#define SET_MP_DATA_GEN_HIT_P_RANGE(REG, VAL) ((REG & (~(0xf<< 0))) | ((VAL & 0xf)<< 0)) 
#define MP_DATA_GEN_FULL_STEAM_BIT 4
#define GET_MP_DATA_GEN_FULL_STEAM_BIT(REG) ((REG>> 4)& 0x1) 
#define SET_MP_DATA_GEN_FULL_STEAM_BIT(REG) ((1<< 4)| REG) 
#define UNSET_MP_DATA_GEN_FULL_STEAM_BIT(REG) ((~(1<< 4))& REG) 
#define MP_DATA_GEN_SYNC_BIT 5
#define GET_MP_DATA_GEN_SYNC_BIT(REG) ((REG>> 5)& 0x1) 
#define SET_MP_DATA_GEN_SYNC_BIT(REG) ((1<< 5)| REG) 
#define UNSET_MP_DATA_GEN_SYNC_BIT(REG) ((~(1<< 5))& REG) 
#define MP_DATA_GEN_ENGAGE_BIT 16
#define GET_MP_DATA_GEN_ENGAGE_BIT(REG) ((REG>> 16)& 0x1) 
#define SET_MP_DATA_GEN_ENGAGE_BIT(REG) ((1<< 16)| REG) 
#define UNSET_MP_DATA_GEN_ENGAGE_BIT(REG) ((~(1<< 16))& REG) 
#define MP_DATA_GEN_SORT_IN_BIT 17
#define GET_MP_DATA_GEN_SORT_IN_BIT(REG) ((REG>> 17)& 0x1) 
#define SET_MP_DATA_GEN_SORT_IN_BIT(REG) ((1<< 17)| REG) 
#define UNSET_MP_DATA_GEN_SORT_IN_BIT(REG) ((~(1<< 17))& REG) 
#define MP_DATA_GEN_ENABLE_BIT 31
#define GET_MP_DATA_GEN_ENABLE_BIT(REG) ((REG>> 31)& 0x1) 
#define SET_MP_DATA_GEN_ENABLE_BIT(REG) ((1<< 31)| REG) 
#define UNSET_MP_DATA_GEN_ENABLE_BIT(REG) ((~(1<< 31))& REG) 
#define MP_DATA_BYPASS_SELECT_REGISTER_W 0x1305
#define MP_TS_HISTO_SELECT_REGISTER_W 0x1306
#define MP_TS_HISTO_LINK_SELECT_RANGE_HI 15
#define MP_TS_HISTO_LINK_SELECT_RANGE_LOW 0
#define GET_MP_TS_HISTO_LINK_SELECT_RANGE(REG) ((REG>>0)&0xffff) 
#define SET_MP_TS_HISTO_LINK_SELECT_RANGE(REG, VAL) ((REG & (~(0xffff<< 0))) | ((VAL & 0xffff)<< 0)) 
#define MP_TS_HISTO_N_SAMPLE_RANGE_HI 31
#define MP_TS_HISTO_N_SAMPLE_RANGE_LOW 16
#define GET_MP_TS_HISTO_N_SAMPLE_RANGE(REG) ((REG>>16)&0xffff) 
#define SET_MP_TS_HISTO_N_SAMPLE_RANGE(REG, VAL) ((REG & (~(0xffff<< 16))) | ((VAL & 0xffff)<< 16)) 
#define MP_LAST_SORTER_HIT_REGISTER_R 0x1307
#define MP_SORTER_INJECT_REGISTER_W 0x1308
#define MP_SORTER_INJECT_SELECT_RANGE_HI 7
#define MP_SORTER_INJECT_SELECT_RANGE_LOW 4
#define GET_MP_SORTER_INJECT_SELECT_RANGE(REG) ((REG>>4)&0xf) 
#define SET_MP_SORTER_INJECT_SELECT_RANGE(REG, VAL) ((REG & (~(0xf<< 4))) | ((VAL & 0xf)<< 4)) 
#define MP_SORTER_INJECT_ENABLE_BIT 8
#define GET_MP_SORTER_INJECT_ENABLE_BIT(REG) ((REG>> 8)& 0x1) 
#define SET_MP_SORTER_INJECT_ENABLE_BIT(REG) ((1<< 8)| REG) 
#define UNSET_MP_SORTER_INJECT_ENABLE_BIT(REG) ((~(1<< 8))& REG) 
#define MP_CHIP_UNPACKER_CNT_REGISTER_R 0x1309
#define MP_CHIP_UNPACKER_CNT_REGISTER_W 0x130a
#define MP_CHIP_UNPACKER_CNT_SELECT_RANGE_HI 7
#define MP_CHIP_UNPACKER_CNT_SELECT_RANGE_LOW 0
#define GET_MP_CHIP_UNPACKER_CNT_SELECT_RANGE(REG) ((REG>>0)&0xff) 
#define SET_MP_CHIP_UNPACKER_CNT_SELECT_RANGE(REG, VAL) ((REG & (~(0xff<< 0))) | ((VAL & 0xff)<< 0)) 
#define MP_CNT_UNPACKER_SELECT_RANGE_HI 10
#define MP_CNT_UNPACKER_SELECT_RANGE_LOW 8
#define GET_MP_CNT_UNPACKER_SELECT_RANGE(REG) ((REG>>8)&0x7) 
#define SET_MP_CNT_UNPACKER_SELECT_RANGE(REG, VAL) ((REG & (~(0x7<< 8))) | ((VAL & 0x7)<< 8)) 
#define MP_HIT_ENA_CNT_SORTER_IN_REGISTER_R 0x130b
#define MP_HIT_ENA_CNT_SORTER_SELECT_REGISTER_W 0x130c
#define MP_HIT_ENA_CNT_SORTER_OUT_REGISTER_R 0x130d
#define MP_RESET_LVDS_N_REGISTER_W 0x130f
#define MP_USE_ARRIVAL_TIME1_REGISTER_W 0x1310
#define MP_USE_ARRIVAL_TIME2_REGISTER_W 0x1311
#define MP_TRIGGER0_REGISTER_R 0x1312
#define MP_TRIGGER1_REGISTER_R 0x1313
#define MP_TRIGGER0_REG_REGISTER_R 0x1314
#define MP_TRIGGER1_REG_REGISTER_R 0x1315
#define MP_LVDS_INVERT_0_REGISTER_W 0x1316
#define MP_LVDS_INVERT_1_REGISTER_W 0x1317
#define MP_IS_A_0_REGISTER_R 0x1318
#define MP_IS_A_1_REGISTER_R 0x1319
#define MP_IS_B_0_REGISTER_R 0x1320
#define MP_IS_B_1_REGISTER_R 0x1321
#define MP_IS_C_0_REGISTER_R 0x1322
#define MP_IS_C_1_REGISTER_R 0x1323
#define MP_READBACK_FIFOS_START_REGISTER_R 0x2000
#define MP_READBACK_MEMS_START_REGISTER_R 0x3000
#define MP_HIT_ARRIVAL_START_REGISTER_R 0x1200
#define MP_SORTER_COUNTER_REGISTER_R 0x1000
#define MP_SORTER_NINTIME_REGISTER_R 0x1000
#define MP_SORTER_NOUTOFTIME_REGISTER_R 0x100c
#define MP_SORTER_NOVERFLOW_REGISTER_R 0x1018
#define MP_SORTER_NOUT_REGISTER_R 0x1024
#define MP_SORTER_CREDIT_REGISTER_R 0x1025
#define MP_SORTER_DELAY_REGISTER_W 0x1028

// sorter registers
#define SORTER_COUNTER_REGISTER_R		0x1000
#define SORTER_INDEX_NINTIME		0
#define SORTER_INDEX_NOUTOFTIME		12
#define SORTER_INDEX_NOVERFLOW		24
#define SORTER_INDEX_NPREWINDOW		36
#define SORTER_INDEX_NPASTWINDOW		48
#define SORTER_INDEX_NOUTDIAG		60
#define SORTER_INDEX_NOUT		72
#define SORTER_INDEX_CREDIT		73
#define SORTER_INDEX_DIAGNOSE		74
#define SORTER_INDEX_DELAY		75

// LVDS registers

#define LVDS_STATUS_REGISTER_R		0x4101
#define LVDS_STATUS_START_REGISTER_W		0x1100
#define LVDS_STATUS_PLL_LOCKED_BIT		 31
#define GET_LVDS_STATUS_PLL_LOCKED_BIT(REG) ((REG>> 31)& 0x1) 
#define SET_LVDS_STATUS_PLL_LOCKED_BIT(REG) ((1<< 31)| REG) 
#define UNSET_LVDS_STATUS_PLL_LOCKED_BIT(REG) ((~(1<< 31))& REG) 
#define LVDS_STATUS_READY_BIT		 30
#define GET_LVDS_STATUS_READY_BIT(REG) ((REG>> 30)& 0x1) 
#define SET_LVDS_STATUS_READY_BIT(REG) ((1<< 30)| REG) 
#define UNSET_LVDS_STATUS_READY_BIT(REG) ((~(1<< 30))& REG) 
#define LVDS_STATUS_DPA_LOCKED_BIT		 29
#define GET_LVDS_STATUS_DPA_LOCKED_BIT(REG) ((REG>> 29)& 0x1) 
#define SET_LVDS_STATUS_DPA_LOCKED_BIT(REG) ((1<< 29)| REG) 
#define UNSET_LVDS_STATUS_DPA_LOCKED_BIT(REG) ((~(1<< 29))& REG) 
#define LVDS_STATUS_ALIGN_CNT_RANGE_HI		27
#define LVDS_STATUS_ALIGN_CNT_RANGE_LOW		22
#define GET_LVDS_STATUS_ALIGN_CNT_RANGE(REG) ((REG>>22)&0x3f) 
#define SET_LVDS_STATUS_ALIGN_CNT_RANGE(REG, VAL) ((REG & (~(0x3f<< 22))) | ((VAL & 0x3f)<< 22))  
#define LVDS_STATUS_ARRIVAL_PHASE_RANGE_HI		21
#define LVDS_STATUS_ARRIVAL_PHASE_RANGE_LOW		20
#define GET_LVDS_STATUS_ARRIVAL_PHASE_RANGE(REG) ((REG>>20)&0x3) 
#define SET_LVDS_STATUS_ARRIVAL_PHASE_RANGE(REG, VAL) ((REG & (~(0x3<< 20))) | ((VAL & 0x3)<< 20))  
#define LVDS_STATUS_OUTOF_PHASE_RANGE_HI		15
#define LVDS_STATUS_OUTOF_PHASE_RANGE_LOW		0
#define GET_LVDS_STATUS_OUTOF_PHASE_RANGE(REG) ((REG>>0)&0xffff) 
#define SET_LVDS_STATUS_OUTOF_PHASE_RANGE(REG, VAL) ((REG & (~(0xffff<< 0))) | ((VAL & 0xffff)<< 0))  


// slow control registers
#define PACKET_TYPE_SC		0x7
#define PACKET_TYPE_SC_READ		0x0
#define PACKET_TYPE_SC_WRITE		0x1
#define PACKET_TYPE_SC_READ_NONINCREMENTING		0x2
#define PACKET_TYPE_SC_WRITE_NONINCREMENTING		0x3
#define PACKET_R_BIT_POSITION		24
#define GET_PACKET_R_BIT_POSITION(REG) ((REG>>24)& 0x1) 
#define SET_PACKET_R_BIT_POSITION(REG) ((1<<24)| REG) 
#define UNSET_PACKET_R_BIT_POSITION(REG) ((~(1<<24)) & REG) 
#define PACKET_T_BIT_POSITION		25
#define GET_PACKET_T_BIT_POSITION(REG) ((REG>>25)& 0x1) 
#define SET_PACKET_T_BIT_POSITION(REG) ((1<<25)| REG) 
#define UNSET_PACKET_T_BIT_POSITION(REG) ((~(1<<25)) & REG) 
#define PACKET_S_BIT_POSITION		26
#define GET_PACKET_S_BIT_POSITION(REG) ((REG>>26)& 0x1) 
#define SET_PACKET_S_BIT_POSITION(REG) ((1<<26)| REG) 
#define UNSET_PACKET_S_BIT_POSITION(REG) ((~(1<<26)) & REG) 
#define PACKET_M_BIT_POSITION		27
#define GET_PACKET_M_BIT_POSITION(REG) ((REG>>27)& 0x1) 
#define SET_PACKET_M_BIT_POSITION(REG) ((1<<27)| REG) 
#define UNSET_PACKET_M_BIT_POSITION(REG) ((~(1<<27)) & REG) 
#define STATUS_REGISTER_R		0xfc00
#define GIT_HASH_REGISTER_R		0xfc01
#define FPGA_TYPE_REGISTER_R		0xfc02
#define FPGA_ID_REGISTER_RW		0xfc03
#define CMD_LEN_REGISTER_RW		0xfc04
#define CMD_OFFSET_REGISTER_RW		0xfc05
#define RUN_STATE_RESET_BYPASS_REGISTER_RW		0xfc06
#define RUN_STATE_RANGE_HI		31
#define RUN_STATE_RANGE_LOW		16
#define GET_RUN_STATE_RANGE(REG) ((REG>>16)&0xffff) 
#define SET_RUN_STATE_RANGE(REG, VAL) ((REG & (~(0xffff<< 16))) | ((VAL & 0xffff)<< 16))  
#define RESET_BYPASS_RANGE_HI		7
#define RESET_BYPASS_RANGE_LOW		0
#define GET_RESET_BYPASS_RANGE(REG) ((REG>>0)&0xff) 
#define SET_RESET_BYPASS_RANGE(REG, VAL) ((REG & (~(0xff<< 0))) | ((VAL & 0xff)<< 0))  
#define RESET_BYPASS_BIT_REQUEST		8
#define GET_RESET_BYPASS_BIT_REQUEST(REG) ((REG>>8)& 0x1) 
#define SET_RESET_BYPASS_BIT_REQUEST(REG) ((1<<8)| REG) 
#define UNSET_RESET_BYPASS_BIT_REQUEST(REG) ((~(1<<8)) & REG) 
#define RESET_BYPASS_BIT_ENABLE		9
#define GET_RESET_BYPASS_BIT_ENABLE(REG) ((REG>>9)& 0x1) 
#define SET_RESET_BYPASS_BIT_ENABLE(REG) ((1<<9)| REG) 
#define UNSET_RESET_BYPASS_BIT_ENABLE(REG) ((~(1<<9)) & REG) 
#define RESET_PAYLOAD_REGISTER_RW		0xfc07
#define RESET_OPTICAL_LINKS_REGISTER_RW		0xfc08
#define RESET_PHASE_REGISTER_R		0xfc09
#define MERGER_RATE_REGISTER_R		0xfc0a
#define ARRIA_TEMP_REGISTER_RW		0xfc10
#define MAX10_ADC_0_1_REGISTER_R		0xfc11
#define MAX10_ADC_2_3_REGISTER_R		0xfc12
#define MAX10_ADC_4_5_REGISTER_R		0xfc13
#define MAX10_ADC_6_7_REGISTER_R		0xfc14
#define MAX10_ADC_8_9_REGISTER_R		0xfc15
#define FIREFLY_STATUS_REGISTER_R		0xfc16
#define FIREFLY1_INDEX_TEMP		0
#define FIREFLY1_INDEX_VOLT		1
#define FIREFLY1_INDEX_RX1_POW		2
#define FIREFLY1_INDEX_RX2_POW		3
#define FIREFLY1_INDEX_RX3_POW		4
#define FIREFLY1_INDEX_RX4_POW		5
#define FIREFLY1_INDEX_ALARM		6
#define FIREFLY2_INDEX_TEMP		7
#define FIREFLY2_INDEX_VOLT		8
#define FIREFLY2_INDEX_RX1_POW		9
#define FIREFLY2_INDEX_RX2_POW		10
#define FIREFLY2_INDEX_RX3_POW		11
#define FIREFLY2_INDEX_RX4_POW		12
#define FIREFLY2_INDEX_ALARM		13
#define NONINCREMENTING_TEST_REGISTER_RW		0xfc24
#define MAX10_VERSION_REGISTER_R		0xfc25
#define MAX10_STATUS_REGISTER_R		0xfc26
#define MAX10_STATUS_BIT_PLL_LOCKED		0
#define GET_MAX10_STATUS_BIT_PLL_LOCKED(REG) ((REG>>0)& 0x1) 
#define SET_MAX10_STATUS_BIT_PLL_LOCKED(REG) ((1<<0)| REG) 
#define UNSET_MAX10_STATUS_BIT_PLL_LOCKED(REG) ((~(1<<0)) & REG) 
#define MAX10_STATUS_BIT_SPI_ARRIA_CLK		1
#define GET_MAX10_STATUS_BIT_SPI_ARRIA_CLK(REG) ((REG>>1)& 0x1) 
#define SET_MAX10_STATUS_BIT_SPI_ARRIA_CLK(REG) ((1<<1)| REG) 
#define UNSET_MAX10_STATUS_BIT_SPI_ARRIA_CLK(REG) ((~(1<<1)) & REG) 
#define PROGRAMMING_CTRL_REGISTER_W		0xfc27
#define PROGRAMMING_STATUS_REGISTER_R		0xfc28
#define PROGRAMMING_STATUS_BIT_SPI_BUSY		1
#define GET_PROGRAMMING_STATUS_BIT_SPI_BUSY(REG) ((REG>>1)& 0x1) 
#define SET_PROGRAMMING_STATUS_BIT_SPI_BUSY(REG) ((1<<1)| REG) 
#define UNSET_PROGRAMMING_STATUS_BIT_SPI_BUSY(REG) ((~(1<<1)) & REG) 
#define PROGRAMMING_STATUS_BIT_FIFO_EMPTY		14
#define GET_PROGRAMMING_STATUS_BIT_FIFO_EMPTY(REG) ((REG>>14)& 0x1) 
#define SET_PROGRAMMING_STATUS_BIT_FIFO_EMPTY(REG) ((1<<14)| REG) 
#define UNSET_PROGRAMMING_STATUS_BIT_FIFO_EMPTY(REG) ((~(1<<14)) & REG) 
#define PROGRAMMING_STATUS_BIT_FIFO_FULL		15
#define GET_PROGRAMMING_STATUS_BIT_FIFO_FULL(REG) ((REG>>15)& 0x1) 
#define SET_PROGRAMMING_STATUS_BIT_FIFO_FULL(REG) ((1<<15)| REG) 
#define UNSET_PROGRAMMING_STATUS_BIT_FIFO_FULL(REG) ((~(1<<15)) & REG) 
#define PROGRAMMING_STATUS_BIT_CONF_DONE		16
#define GET_PROGRAMMING_STATUS_BIT_CONF_DONE(REG) ((REG>>16)& 0x1) 
#define SET_PROGRAMMING_STATUS_BIT_CONF_DONE(REG) ((1<<16)| REG) 
#define UNSET_PROGRAMMING_STATUS_BIT_CONF_DONE(REG) ((~(1<<16)) & REG) 
#define PROGRAMMING_STATUS_BIT_NSTATUS		17
#define GET_PROGRAMMING_STATUS_BIT_NSTATUS(REG) ((REG>>17)& 0x1) 
#define SET_PROGRAMMING_STATUS_BIT_NSTATUS(REG) ((1<<17)| REG) 
#define UNSET_PROGRAMMING_STATUS_BIT_NSTATUS(REG) ((~(1<<17)) & REG) 
#define PROGRAMMING_STATUS_BIT_TIMEOUT		18
#define GET_PROGRAMMING_STATUS_BIT_TIMEOUT(REG) ((REG>>18)& 0x1) 
#define SET_PROGRAMMING_STATUS_BIT_TIMEOUT(REG) ((1<<18)| REG) 
#define UNSET_PROGRAMMING_STATUS_BIT_TIMEOUT(REG) ((~(1<<18)) & REG) 
#define PROGRAMMING_STATUS_BIT_CRCERROR		19
#define GET_PROGRAMMING_STATUS_BIT_CRCERROR(REG) ((REG>>19)& 0x1) 
#define SET_PROGRAMMING_STATUS_BIT_CRCERROR(REG) ((1<<19)| REG) 
#define UNSET_PROGRAMMING_STATUS_BIT_CRCERROR(REG) ((~(1<<19)) & REG) 
#define PROGRAMMING_ADDR_REGISTER_W		0xfc29
#define PROGRAMMING_DATA_REGISTER_W		0xfc2a
#define REBOOT_REGISTER_RW		0xfc2d
#define SHUTDOWN_REGISTER_RW		0xfc2e
#define RUN_START_DENIAL_REGISTER_R		0xfc2f
#define RUN_NUMBER_REGISTER_R		0xfc2f
#define FIREFLY_XCVR_CH_SEL_REGISTER_RW		0xff00
#define FIREFLY_XCVR_N_CH_REGISTER_R		0xff01
#define FIREFLY_XCVR_CH_WIDTH_REGISTER_R		0xff02
#define FIREFLY_XCVR_TX_RESET_REGISTER_RW		0xff10
#define FIREFLY_XCVR_TX_STATUS_REGISTER_R		0xff11
#define FIREFLY_XCVR_TX_ERROR_REGISTER_R		0xff12
#define FIREFLY_XCVR_RX_RESET_REGISTER_RW		0xff20
#define FIREFLY_XCVR_RX_STATUS_REGISTER_R		0xff21
#define FIREFLY_XCVR_RX_ERROR_REGISTER_R		0xff22
#define FIREFLY_XCVR_LOL_REGISTER_R		0xff23
#define FIREFLY_XCVR_ERR_CNT_REGISTER_R		0xff24
#define FIREFLY_XCVR_DATA_REGISTER_R		0xff2a
#define FIREFLY_XCVR_DATAK_REGISTER_R		0xff2b
#define FIREFLY_XCVR_GBIT_REGISTER_R		0xff2c
#define FIREFLY_XCVR_LOOPBACK_REGISTER_RW		0xff2f
#define RESET_LINK_RESTART_REGISTER_RW		0xff30
#define LVDS_CONTROLLER_STATE_REGISTER_R		0xff31

// A10 counter registers

#define SWB_BANK_BUILDER_IDLE_NOT_HEADER_CNT		0x00
#define SWB_BANK_BUILDER_SKIP_EVENT_CNT		0x01
#define SWB_BANK_BUILDER_EVENT_CNT		0x02
#define SWB_BANK_BUILDER_TAG_FIFO_FULL_CNT		0x03
#define SWB_DEBUG_RO_CNT		0x04
#define SWB_STREAM_FIFO_FULL_CNT		0x00
#define SWB_STREAM_DEBUG_FIFO_ALFULL_CNT		0x01
#define DUMMY_0_CNT		0x02
#define DUMMY_1_CNT		0x03
#define DUMMY_2_CNT		0x04
#define DUMMY_3_CNT		0x05
#define SWB_EVENTS_TO_FARM_CNT		0x06
#define SWB_MERGER_DEBUG_FIFO_ALFULL_CNT		0x07
#define SWB_DATAPATH_CNT		0x08
#define SWB_MERGER_HEADER_CNT		0x00
#define SWB_MERGER_SHEADER_CNT		0x01
#define SWB_MERGER_HIT_CNT		0x02
#define SWB_TREE_CNT		0x03
#define SWB_LAYER0_OUT_CNT		0x04
#define SWB_LAYER1_OUT_CNT		0x02
#define SWB_LAYER2_OUT_CNT		0x01
#define SWB_LINK_FIFO_ALMOST_FULL_CNT		0x00
#define SWB_LINK_FIFO_FULL_CNT		0x01
#define SWB_SKIP_SORTER_PACKAGE_CNT		0x02
#define SWB_EVENT_CNT		0x03
#define SWB_SUB_HEADER_CNT		0x04
#define SWB_SKIP_HITS_CNT		0x06
#define SWB_SKIP_SUBHEADER_CNT		0x07
#define SWB_LINK_CNT		0x09
#define FARM_LINK_FIFO_ALMOST_FULL_CNT		0x00
#define FARM_LINK_FIFO_FULL_CNT		0x01
#define FARM_SKIP_EVENT_CNT		0x02
#define FARM_EVENT_CNT		0x03
#define FARM_SUB_HEADER_CNT		0x04
#define FARM_LINK_CNT		0x03
#define FARM_DDR_BUILDER_IDLE_NOT_HEADER_CNT		0x00
#define FARM_DDR_BUILDER_SKIP_EVENT_CNT		0x01
#define FARM_DDR_BUILDER_EVENT_CNT		0x02
#define FARM_DDR_BUILDER_TAG_FIFO_FULL_CNT		0x03
#define FARM_BANK_BUILDER_IDLE_NOT_HEADER_CNT		0x00
#define FARM_BANK_BUILDER_SKIP_EVENT_CNT		0x01
#define FARM_BANK_BUILDER_EVENT_CNT		0x02
#define FARM_BANK_BUILDER_TAG_FIFO_FULL_CNT		0x03
