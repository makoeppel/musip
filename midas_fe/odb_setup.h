/**
 * @file odb_setup.h
 * @brief Default MIDAS ODB structure and initialization for Quads frontend.
 *
 * This header defines the structure of the Online Database (ODB) used by the
 * Quads DAQ frontend, including readout configuration and DAQ command parameters.
 *
 * @details
 * The file maps the following ODB sections:
 * - `/Equipment/Quads Config/Settings`: Contains readout options (e.g., datagen control,
 *   dummy mode, ASIC reset, maximum data words, etc.).
 * - `/Equipment/Quads Config/DAQ`: Includes DAQ-related commands such as firmware loading.
 *
 * It uses a `midas::odb` map for structured and type-safe access to parameters,
 * and provides utility functions like `filled_array` for initializing default values.
 *
 * @note This file must be included before using any ODB access in the frontend.
 */

#include "midas.h"
#include "odbxx.h"
#include "registers.h"

template <typename T, std::size_t N>
constexpr std::array<T, N> filled_array(const T& value) {
    std::array<T, N> arr{};
    arr.fill(value);
    return arr;
}

// Map /Equipment/Quads/Settings
midas::odb settings = {
    {"Readout",
     {{"Datagen Divider", 1000},
      {"Software dummy", false},
      {"Datagen Enable", false},
      {"mask_n_generic", 0x0},
      {"use_merger", false},
      {"max_requested_words", max_requested_words},
      {"n_mevents", 10},
      {"MupixConfig", false},
      {"MupixTDACConfig", false},
      {"ResetASICs", false},
      {"DataGenEnable", false},
      {"DataGenDisable", false},
      {"DataGenBeforeSorter", false},
      {"DataGenAfterSorter", false},
      {"DataGenSync", false},
      {"DataGenFullSteam", false},
      {"DataGenRate", 0},
      {"Reset FEB Counters", false}}},
    {"DAQ",
     {
         {"Commands",
          {{"InitFEBs", false},
           {"Load Firmware", false},
           {"Firmware File", ""},
           {"Firmware FEB ID", 0},
           {"FirmwareLoadProgress", 0.0},
           {"Reset SWB Counters", false},
           {"Set Bypass", false},
           {"Unset Bypass", false},
           {"Set FEBs into running", false},
           {"Set FEBs into idle", false}}},
         {"Links",
          {{"LVDSLinkMask", std::array<uint64_t, N_FEBS>{0}},
           {"LVDSLinkInvert", std::array<uint64_t, N_FEBS>{0}},
           {"ASICMask", std::array<uint16_t, N_FEBS>{0}},
           {"FEBsActive", std::array<bool, N_FEBS>{false}},
           {"Mapping", {1,  2,  3,  4,  5,  6,  7,  90, 91, 92, 93, 8,  9,  10, 11, 12,
                        13, 14, 15, 90, 91, 92, 93, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                        99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}}}},
     }},
    {"Config",
     {{"BIASDACS",
       {// PLL
        {"VNVCO", filled_array<uint32_t, N_CHIPS * N_FEBS>(23)},
        {"VPVCO", filled_array<uint32_t, N_CHIPS * N_FEBS>(22)},
        {"VNTimerDel", filled_array<uint32_t, N_CHIPS * N_FEBS>(20)},
        {"VPTimerDel", filled_array<uint32_t, N_CHIPS * N_FEBS>(10)},
        {"VPPump", filled_array<uint32_t, N_CHIPS * N_FEBS>(30)},
        {"VNLVDSDel", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"VNLVDS", filled_array<uint32_t, N_CHIPS * N_FEBS>(16)},
        {"VPDcl", filled_array<uint32_t, N_CHIPS * N_FEBS>(30)},
        {"VNDelPreEmp", filled_array<uint32_t, N_CHIPS * N_FEBS>(32)},
        {"VPDelPreEmp", filled_array<uint32_t, N_CHIPS * N_FEBS>(32)},
        {"VNDcl", filled_array<uint32_t, N_CHIPS * N_FEBS>(10)},
        {"VNDelDcl", filled_array<uint32_t, N_CHIPS * N_FEBS>(32)},
        {"VPDelDcl", filled_array<uint32_t, N_CHIPS * N_FEBS>(32)},
        {"VNDelDclMux", filled_array<uint32_t, N_CHIPS * N_FEBS>(32)},
        {"VPDelDclMux", filled_array<uint32_t, N_CHIPS * N_FEBS>(32)},
        {"VNDel", filled_array<uint32_t, N_CHIPS * N_FEBS>(10)},
        {"VNRegC", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        // Pixel
        {"VNPix", filled_array<uint32_t, N_CHIPS * N_FEBS>(10)},
        {"VPLoadPix", filled_array<uint32_t, N_CHIPS * N_FEBS>(5)},
        {"VNFBPix", filled_array<uint32_t, N_CHIPS * N_FEBS>(3)},
        {"VNFollPix", filled_array<uint32_t, N_CHIPS * N_FEBS>(5)},
        {"VNOutPix", filled_array<uint32_t, N_CHIPS * N_FEBS>(5)},
        {"VPComp1", filled_array<uint32_t, N_CHIPS * N_FEBS>(5)},
        {"VPComp2", filled_array<uint32_t, N_CHIPS * N_FEBS>(5)},
        {"VNBiasPix", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"BLResDig", filled_array<uint32_t, N_CHIPS * N_FEBS>(6)},
        {"BLResPix", filled_array<uint32_t, N_CHIPS * N_FEBS>(6)},
        {"VNPix2", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"VNComp", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"VNDAC", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"VPDAC", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        // General
        {"ThRes", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"BiasBlock_on", filled_array<uint32_t, N_CHIPS * N_FEBS>(5)},
        {"Bandgap_on", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"VPFoll", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"VNHB", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)}}},
      {"CONFDACS",
       {{"TestOut", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"AlwaysEnable", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"En2thre", filled_array<uint32_t, N_CHIPS * N_FEBS>(1)},
        {"EnPLL", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"SelFast", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"count_sheep", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"NC1", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"disable_HB", filled_array<uint32_t, N_CHIPS * N_FEBS>(1)},
        {"conf_res_n", filled_array<uint32_t, N_CHIPS * N_FEBS>(1)},
        {"RO_res_n", filled_array<uint32_t, N_CHIPS * N_FEBS>(1)},
        {"Ser_res_n", filled_array<uint32_t, N_CHIPS * N_FEBS>(1)},
        {"Aur_res_n", filled_array<uint32_t, N_CHIPS * N_FEBS>(1)},
        {"NC2", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"Tune_Reg_L", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"NC3", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"Tune_Reg_R", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"NC4", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"SelSlow", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"SelEx", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"invert", filled_array<uint32_t, N_CHIPS * N_FEBS>(1)},
        {"slowdownlDColEnd", filled_array<uint32_t, N_CHIPS * N_FEBS>(7)},
        {"EnSync_SC", filled_array<uint32_t, N_CHIPS * N_FEBS>(1)},
        {"NC5", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"linksel", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"tsphase", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"sendcounter", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"resetckdivend", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"NC6", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"maxcycend", filled_array<uint32_t, N_CHIPS * N_FEBS>(63)},
        {"slowdownend", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"timerend", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"ckdivend2", filled_array<uint32_t, N_CHIPS * N_FEBS>(15)},
        {"ckdivend", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)}}},
      {"VDACS",
       {{"BLPix", filled_array<uint32_t, N_CHIPS * N_FEBS>(60)},
        {"ThHigh", filled_array<uint32_t, N_CHIPS * N_FEBS>(135)},
        {"ThLow", filled_array<uint32_t, N_CHIPS * N_FEBS>(134)},
        {"Baseline", filled_array<uint32_t, N_CHIPS * N_FEBS>(112)},
        {"ref_Vss", filled_array<uint32_t, N_CHIPS * N_FEBS>(169)},
        {"VCAL", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"ThPix", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"ThHigh2", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"ThLow2", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)},
        {"VDAC1", filled_array<uint32_t, N_CHIPS * N_FEBS>(0)}}},
      {"Nbits",
       {// BIASDACS
        {"VNTimerDel", 6},
        {"VPTimerDel", 6},
        {"VNDAC", 6},
        {"VPFoll", 6},
        {"VNComp", 6},
        {"VNHB", 6},
        {"VPComp2", 6},
        {"VPPump", 6},
        {"VNLVDSDel", 6},
        {"VNLVDS", 6},
        {"VNDcl", 6},
        {"VPDcl", 6},
        {"VNDelPreEmp", 6},
        {"VPDelPreEmp", 6},
        {"VNDelDcl", 6},
        {"VPDelDcl", 6},
        {"VNDelDclMux", 6},
        {"VPDelDclMux", 6},
        {"VNVCO", 6},
        {"VPVCO", 6},
        {"VNOutPix", 6},
        {"VPLoadPix", 6},
        {"VNBiasPix", 6},
        {"BLResDig", 6},
        {"VNPix2", 6},
        {"VPDAC", 6},
        {"VPComp1", 6},
        {"VNDel", 6},
        {"VNRegC", 6},
        {"VNFollPix", 6},
        {"VNFBPix", 6},
        {"VNPix", 6},
        {"ThRes", 6},
        {"BLResPix", 6},
        {"BiasBlock_on", 3},
        {"Bandgap_on", 1},
        // here all inverse?
        // CONFDACS
        {"SelFast", 1},
        {"count_sheep", 1},
        {"NC1", 5},
        {"TestOut", 4},
        {"disable_HB", 1},
        {"conf_res_n", 1},
        {"RO_res_n", 1},
        {"Ser_res_n", 1},
        {"Aur_res_n", 1},
        {"NC2", 1},
        {"Tune_Reg_L", 6},
        {"NC3", 1},
        {"Tune_Reg_R", 6},
        {"AlwaysEnable", 1},
        {"En2thre", 1},
        {"NC4", 4},
        {"EnPLL", 1},
        {"SelSlow", 1},
        {"SelEx", 1},
        {"invert", 1},
        {"slowdownlDColEnd", 5},
        {"EnSync_SC", 1},
        {"NC5", 3},
        {"linksel", 2},
        {"tsphase", 6},
        {"sendcounter", 1},
        {"resetckdivend", 4},
        {"NC6", 2},
        {"maxcycend", 6},
        {"slowdownend", 4},
        {"timerend", 4},
        {"ckdivend2", 6},
        {"ckdivend", 6},
        // VDACS
        {"VCAL", 8},
        {"BLPix", 8},
        {"ThPix", 8},
        {"ThHigh", 8},
        {"ThLow", 8},
        {"ThHigh2", 8},
        {"ThLow2", 8},
        {"Baseline", 8},
        {"VDAC1", 8},
        {"ref_Vss", 8}}},
      {"TDACS",
       {{"F0", ""},
        {"F1", ""},
        {"F2", ""},
        {"F3", ""},
        {"H0", ""},
        {"H1", ""},
        {"H2", ""},
        {"H3", ""}}}}}};
